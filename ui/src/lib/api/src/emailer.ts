/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { EmailerContext } from "./emailerContext";

class Emailer extends EmailerContext {
  /**
   * Initializes a new instance of the Emailer class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.EmailerOptions) {
    super(options);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomersResponse>
   */
  getCustomers(options?: msRest.RequestOptionsBase): Promise<Models.GetCustomersResponse>;
  /**
   * @param callback The callback
   */
  getCustomers(callback: msRest.ServiceCallback<Models.Customer[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Customer[]>): void;
  getCustomers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Customer[]>, callback?: msRest.ServiceCallback<Models.Customer[]>): Promise<Models.GetCustomersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCustomersOperationSpec,
      callback) as Promise<Models.GetCustomersResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.AddCustomerResponse>
   */
  addCustomer(options?: Models.EmailerAddCustomerOptionalParams): Promise<Models.AddCustomerResponse>;
  /**
   * @param callback The callback
   */
  addCustomer(callback: msRest.ServiceCallback<Models.Customer>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  addCustomer(options: Models.EmailerAddCustomerOptionalParams, callback: msRest.ServiceCallback<Models.Customer>): void;
  addCustomer(options?: Models.EmailerAddCustomerOptionalParams | msRest.ServiceCallback<Models.Customer>, callback?: msRest.ServiceCallback<Models.Customer>): Promise<Models.AddCustomerResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      addCustomerOperationSpec,
      callback) as Promise<Models.AddCustomerResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateCustomerResponse>
   */
  updateCustomer(options?: Models.EmailerUpdateCustomerOptionalParams): Promise<Models.UpdateCustomerResponse>;
  /**
   * @param callback The callback
   */
  updateCustomer(callback: msRest.ServiceCallback<Models.Customer>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCustomer(options: Models.EmailerUpdateCustomerOptionalParams, callback: msRest.ServiceCallback<Models.Customer>): void;
  updateCustomer(options?: Models.EmailerUpdateCustomerOptionalParams | msRest.ServiceCallback<Models.Customer>, callback?: msRest.ServiceCallback<Models.Customer>): Promise<Models.UpdateCustomerResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      updateCustomerOperationSpec,
      callback) as Promise<Models.UpdateCustomerResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomer(options?: Models.EmailerDeleteCustomerOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteCustomer(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomer(options: Models.EmailerDeleteCustomerOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteCustomer(options?: Models.EmailerDeleteCustomerOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteCustomerOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEmailBlastsResponse>
   */
  getEmailBlasts(options?: msRest.RequestOptionsBase): Promise<Models.GetEmailBlastsResponse>;
  /**
   * @param callback The callback
   */
  getEmailBlasts(callback: msRest.ServiceCallback<Models.EmailBlast[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmailBlasts(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EmailBlast[]>): void;
  getEmailBlasts(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EmailBlast[]>, callback?: msRest.ServiceCallback<Models.EmailBlast[]>): Promise<Models.GetEmailBlastsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getEmailBlastsOperationSpec,
      callback) as Promise<Models.GetEmailBlastsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.AddEmailBlastResponse>
   */
  addEmailBlast(options?: Models.EmailerAddEmailBlastOptionalParams): Promise<Models.AddEmailBlastResponse>;
  /**
   * @param callback The callback
   */
  addEmailBlast(callback: msRest.ServiceCallback<Models.EmailBlast>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  addEmailBlast(options: Models.EmailerAddEmailBlastOptionalParams, callback: msRest.ServiceCallback<Models.EmailBlast>): void;
  addEmailBlast(options?: Models.EmailerAddEmailBlastOptionalParams | msRest.ServiceCallback<Models.EmailBlast>, callback?: msRest.ServiceCallback<Models.EmailBlast>): Promise<Models.AddEmailBlastResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      addEmailBlastOperationSpec,
      callback) as Promise<Models.AddEmailBlastResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateEmailBlastResponse>
   */
  updateEmailBlast(options?: Models.EmailerUpdateEmailBlastOptionalParams): Promise<Models.UpdateEmailBlastResponse>;
  /**
   * @param callback The callback
   */
  updateEmailBlast(callback: msRest.ServiceCallback<Models.EmailBlast>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEmailBlast(options: Models.EmailerUpdateEmailBlastOptionalParams, callback: msRest.ServiceCallback<Models.EmailBlast>): void;
  updateEmailBlast(options?: Models.EmailerUpdateEmailBlastOptionalParams | msRest.ServiceCallback<Models.EmailBlast>, callback?: msRest.ServiceCallback<Models.EmailBlast>): Promise<Models.UpdateEmailBlastResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      updateEmailBlastOperationSpec,
      callback) as Promise<Models.UpdateEmailBlastResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteEmailBlast(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  deleteEmailBlast(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEmailBlast(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteEmailBlast(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteEmailBlastOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEmailRecipientsResponse>
   */
  getEmailRecipients(options?: msRest.RequestOptionsBase): Promise<Models.GetEmailRecipientsResponse>;
  /**
   * @param callback The callback
   */
  getEmailRecipients(callback: msRest.ServiceCallback<Models.EmailRecipient[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmailRecipients(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EmailRecipient[]>): void;
  getEmailRecipients(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EmailRecipient[]>, callback?: msRest.ServiceCallback<Models.EmailRecipient[]>): Promise<Models.GetEmailRecipientsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getEmailRecipientsOperationSpec,
      callback) as Promise<Models.GetEmailRecipientsResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.AddEmailRecipientResponse>
   */
  addEmailRecipient(options?: Models.EmailerAddEmailRecipientOptionalParams): Promise<Models.AddEmailRecipientResponse>;
  /**
   * @param callback The callback
   */
  addEmailRecipient(callback: msRest.ServiceCallback<Models.EmailRecipient>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  addEmailRecipient(options: Models.EmailerAddEmailRecipientOptionalParams, callback: msRest.ServiceCallback<Models.EmailRecipient>): void;
  addEmailRecipient(options?: Models.EmailerAddEmailRecipientOptionalParams | msRest.ServiceCallback<Models.EmailRecipient>, callback?: msRest.ServiceCallback<Models.EmailRecipient>): Promise<Models.AddEmailRecipientResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      addEmailRecipientOperationSpec,
      callback) as Promise<Models.AddEmailRecipientResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateEmailRecipientResponse>
   */
  updateEmailRecipient(options?: Models.EmailerUpdateEmailRecipientOptionalParams): Promise<Models.UpdateEmailRecipientResponse>;
  /**
   * @param callback The callback
   */
  updateEmailRecipient(callback: msRest.ServiceCallback<Models.EmailRecipient>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEmailRecipient(options: Models.EmailerUpdateEmailRecipientOptionalParams, callback: msRest.ServiceCallback<Models.EmailRecipient>): void;
  updateEmailRecipient(options?: Models.EmailerUpdateEmailRecipientOptionalParams | msRest.ServiceCallback<Models.EmailRecipient>, callback?: msRest.ServiceCallback<Models.EmailRecipient>): Promise<Models.UpdateEmailRecipientResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      updateEmailRecipientOperationSpec,
      callback) as Promise<Models.UpdateEmailRecipientResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteEmailRecipient(options?: Models.EmailerDeleteEmailRecipientOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteEmailRecipient(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEmailRecipient(options: Models.EmailerDeleteEmailRecipientOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteEmailRecipient(options?: Models.EmailerDeleteEmailRecipientOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteEmailRecipientOperationSpec,
      callback);
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTemplatesResponse>
   */
  getTemplates(options?: msRest.RequestOptionsBase): Promise<Models.GetTemplatesResponse>;
  /**
   * @param callback The callback
   */
  getTemplates(callback: msRest.ServiceCallback<Models.Template[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getTemplates(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Template[]>): void;
  getTemplates(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Template[]>, callback?: msRest.ServiceCallback<Models.Template[]>): Promise<Models.GetTemplatesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getTemplatesOperationSpec,
      callback) as Promise<Models.GetTemplatesResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.AddTemplateResponse>
   */
  addTemplate(options?: Models.EmailerAddTemplateOptionalParams): Promise<Models.AddTemplateResponse>;
  /**
   * @param callback The callback
   */
  addTemplate(callback: msRest.ServiceCallback<Models.Template>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  addTemplate(options: Models.EmailerAddTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Template>): void;
  addTemplate(options?: Models.EmailerAddTemplateOptionalParams | msRest.ServiceCallback<Models.Template>, callback?: msRest.ServiceCallback<Models.Template>): Promise<Models.AddTemplateResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      addTemplateOperationSpec,
      callback) as Promise<Models.AddTemplateResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateTemplateResponse>
   */
  updateTemplate(options?: Models.EmailerUpdateTemplateOptionalParams): Promise<Models.UpdateTemplateResponse>;
  /**
   * @param callback The callback
   */
  updateTemplate(callback: msRest.ServiceCallback<Models.Template>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTemplate(options: Models.EmailerUpdateTemplateOptionalParams, callback: msRest.ServiceCallback<Models.Template>): void;
  updateTemplate(options?: Models.EmailerUpdateTemplateOptionalParams | msRest.ServiceCallback<Models.Template>, callback?: msRest.ServiceCallback<Models.Template>): Promise<Models.UpdateTemplateResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      updateTemplateOperationSpec,
      callback) as Promise<Models.UpdateTemplateResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTemplate(options?: Models.EmailerDeleteTemplateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteTemplate(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTemplate(options: Models.EmailerDeleteTemplateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteTemplate(options?: Models.EmailerDeleteTemplateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteTemplateOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCustomersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "customers",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Customer"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const addCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "customers",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Customer
  },
  responses: {
    200: {
      bodyMapper: Mappers.Customer
    },
    default: {}
  },
  serializer
};

const updateCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "customers",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Customer
  },
  responses: {
    200: {
      bodyMapper: Mappers.Customer
    },
    default: {}
  },
  serializer
};

const deleteCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "customers",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Customer
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getEmailBlastsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "emailblasts",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailBlast"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const addEmailBlastOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "emailblasts",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EmailBlast
  },
  responses: {
    200: {
      bodyMapper: Mappers.EmailBlast
    },
    default: {}
  },
  serializer
};

const updateEmailBlastOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "emailblasts",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EmailBlast
  },
  responses: {
    200: {
      bodyMapper: Mappers.EmailBlast
    },
    default: {}
  },
  serializer
};

const deleteEmailBlastOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "emailblasts/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getEmailRecipientsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "emailrecipients",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailRecipient"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const addEmailRecipientOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "emailrecipients",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EmailRecipient
  },
  responses: {
    200: {
      bodyMapper: Mappers.EmailRecipient
    },
    default: {}
  },
  serializer
};

const updateEmailRecipientOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "emailrecipients",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EmailRecipient
  },
  responses: {
    200: {
      bodyMapper: Mappers.EmailRecipient
    },
    default: {}
  },
  serializer
};

const deleteEmailRecipientOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "emailrecipients",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.EmailRecipient
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getTemplatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "templates",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Template"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const addTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "templates",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Template
  },
  responses: {
    200: {
      bodyMapper: Mappers.Template
    },
    default: {}
  },
  serializer
};

const updateTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "templates",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.Template
  },
  responses: {
    200: {
      bodyMapper: Mappers.Template
    },
    default: {}
  },
  serializer
};

const deleteTemplateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "templates",
  queryParameters: [
    Parameters.id1
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

export {
  Emailer,
  EmailerContext,
  Models as EmailerModels,
  Mappers as EmailerMappers
};
