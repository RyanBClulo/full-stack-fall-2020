"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailerMappers = exports.EmailerModels = exports.EmailerContext = exports.Emailer = void 0;
const msRest = require("@azure/ms-rest-js");
const Models = require("./models");
exports.EmailerModels = Models;
const Mappers = require("./models/mappers");
exports.EmailerMappers = Mappers;
const Parameters = require("./models/parameters");
const emailerContext_1 = require("./emailerContext");
Object.defineProperty(exports, "EmailerContext", { enumerable: true, get: function () { return emailerContext_1.EmailerContext; } });
class Emailer extends emailerContext_1.EmailerContext {
    /**
     * Initializes a new instance of the Emailer class.
     * @param [options] The parameter options
     */
    constructor(options) {
        super(options);
    }
    getCustomers(options, callback) {
        return this.sendOperationRequest({
            options
        }, getCustomersOperationSpec, callback);
    }
    addCustomer(options, callback) {
        return this.sendOperationRequest({
            options
        }, addCustomerOperationSpec, callback);
    }
    updateCustomer(options, callback) {
        return this.sendOperationRequest({
            options
        }, updateCustomerOperationSpec, callback);
    }
    deleteCustomer(options, callback) {
        return this.sendOperationRequest({
            options
        }, deleteCustomerOperationSpec, callback);
    }
    getEmailBlasts(options, callback) {
        return this.sendOperationRequest({
            options
        }, getEmailBlastsOperationSpec, callback);
    }
    addEmailBlast(options, callback) {
        return this.sendOperationRequest({
            options
        }, addEmailBlastOperationSpec, callback);
    }
    updateEmailBlast(options, callback) {
        return this.sendOperationRequest({
            options
        }, updateEmailBlastOperationSpec, callback);
    }
    deleteEmailBlast(id, options, callback) {
        return this.sendOperationRequest({
            id,
            options
        }, deleteEmailBlastOperationSpec, callback);
    }
    getEmailRecipients(options, callback) {
        return this.sendOperationRequest({
            options
        }, getEmailRecipientsOperationSpec, callback);
    }
    addEmailRecipient(options, callback) {
        return this.sendOperationRequest({
            options
        }, addEmailRecipientOperationSpec, callback);
    }
    updateEmailRecipient(options, callback) {
        return this.sendOperationRequest({
            options
        }, updateEmailRecipientOperationSpec, callback);
    }
    deleteEmailRecipient(options, callback) {
        return this.sendOperationRequest({
            options
        }, deleteEmailRecipientOperationSpec, callback);
    }
    getTemplates(options, callback) {
        return this.sendOperationRequest({
            options
        }, getTemplatesOperationSpec, callback);
    }
    addTemplate(options, callback) {
        return this.sendOperationRequest({
            options
        }, addTemplateOperationSpec, callback);
    }
    updateTemplate(options, callback) {
        return this.sendOperationRequest({
            options
        }, updateTemplateOperationSpec, callback);
    }
    deleteTemplate(options, callback) {
        return this.sendOperationRequest({
            options
        }, deleteTemplateOperationSpec, callback);
    }
}
exports.Emailer = Emailer;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCustomersOperationSpec = {
    httpMethod: "GET",
    path: "customers",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Customer"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer
};
const addCustomerOperationSpec = {
    httpMethod: "POST",
    path: "customers",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Customer
    },
    responses: {
        200: {
            bodyMapper: Mappers.Customer
        },
        default: {}
    },
    serializer
};
const updateCustomerOperationSpec = {
    httpMethod: "PUT",
    path: "customers",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Customer
    },
    responses: {
        200: {
            bodyMapper: Mappers.Customer
        },
        default: {}
    },
    serializer
};
const deleteCustomerOperationSpec = {
    httpMethod: "DELETE",
    path: "customers",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Customer
    },
    responses: {
        200: {},
        default: {}
    },
    serializer
};
const getEmailBlastsOperationSpec = {
    httpMethod: "GET",
    path: "emailblasts",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EmailBlast"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer
};
const addEmailBlastOperationSpec = {
    httpMethod: "POST",
    path: "emailblasts",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.EmailBlast
    },
    responses: {
        200: {
            bodyMapper: Mappers.EmailBlast
        },
        default: {}
    },
    serializer
};
const updateEmailBlastOperationSpec = {
    httpMethod: "PUT",
    path: "emailblasts",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.EmailBlast
    },
    responses: {
        200: {
            bodyMapper: Mappers.EmailBlast
        },
        default: {}
    },
    serializer
};
const deleteEmailBlastOperationSpec = {
    httpMethod: "DELETE",
    path: "emailblasts/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer
};
const getEmailRecipientsOperationSpec = {
    httpMethod: "GET",
    path: "emailrecipients",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EmailRecipient"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer
};
const addEmailRecipientOperationSpec = {
    httpMethod: "POST",
    path: "emailrecipients",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.EmailRecipient
    },
    responses: {
        200: {
            bodyMapper: Mappers.EmailRecipient
        },
        default: {}
    },
    serializer
};
const updateEmailRecipientOperationSpec = {
    httpMethod: "PUT",
    path: "emailrecipients",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.EmailRecipient
    },
    responses: {
        200: {
            bodyMapper: Mappers.EmailRecipient
        },
        default: {}
    },
    serializer
};
const deleteEmailRecipientOperationSpec = {
    httpMethod: "DELETE",
    path: "emailrecipients",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.EmailRecipient
    },
    responses: {
        200: {},
        default: {}
    },
    serializer
};
const getTemplatesOperationSpec = {
    httpMethod: "GET",
    path: "templates",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Template"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer
};
const addTemplateOperationSpec = {
    httpMethod: "POST",
    path: "templates",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Template
    },
    responses: {
        200: {
            bodyMapper: Mappers.Template
        },
        default: {}
    },
    serializer
};
const updateTemplateOperationSpec = {
    httpMethod: "PUT",
    path: "templates",
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.Template
    },
    responses: {
        200: {
            bodyMapper: Mappers.Template
        },
        default: {}
    },
    serializer
};
const deleteTemplateOperationSpec = {
    httpMethod: "DELETE",
    path: "templates",
    queryParameters: [
        Parameters.id1
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer
};
//# sourceMappingURL=emailer.js.map